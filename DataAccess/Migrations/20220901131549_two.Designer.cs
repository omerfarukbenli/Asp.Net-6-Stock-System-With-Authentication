// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StokApp.DataAccess.Concrete.EntityFramework.Conctext;

#nullable disable

namespace StokApp.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220901131549_two")]
    partial class two
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("StokApp.Entities.Concrete.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "kalem1"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Kalem2"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Kalem3"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Kale4"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Kalem5"
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Kalem6"
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Kale7"
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Kalem8"
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Kalem9"
                        },
                        new
                        {
                            Id = 10,
                            CategoryName = "Kalem10"
                        });
                });

            modelBuilder.Entity("StokApp.Entities.Concrete.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ProductName = "kalem1"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            ProductName = "Kalem2"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            ProductName = "Kalem3"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            ProductName = "Kale4"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            ProductName = "Kalem5"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            ProductName = "Kalem6"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            ProductName = "Kale7"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            ProductName = "Kalem8"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            ProductName = "Kalem9"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            ProductName = "Kalem10"
                        });
                });

            modelBuilder.Entity("StokApp.Entities.Concrete.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StokApp.Entities.Concrete.Models.Product", b =>
                {
                    b.HasOne("StokApp.Entities.Concrete.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("StokApp.Entities.Concrete.Models.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
